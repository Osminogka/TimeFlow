{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Debugging: Show raw transaction data \"), !$setup.transactions.length ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, \"No transactions available\")) : (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.transactions, tx => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: tx.category\n    }, _toDisplayString(tx.category) + \": \" + _toDisplayString(tx.amount), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])), _createCommentVNode(\" Render PieChart only if there’s data \"), $setup.chartData.labels.length ? (_openBlock(), _createBlock($setup[\"PieChart\"], {\n    key: 2,\n    data: $setup.chartData\n  }, null, 8 /* PROPS */, [\"data\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createCommentVNode","$setup","transactions","length","_hoisted_1","_hoisted_2","_Fragment","_renderList","tx","category","_toDisplayString","amount","chartData","labels","_createBlock","data"],"sources":["E:\\Programming\\Server\\TimeFlow\\Frontend\\src\\components\\PieChartComponent.vue"],"sourcesContent":["<script setup>\r\nimport { ref, computed, watch, onMounted } from 'vue';\r\nimport { PieChart } from 'vue-chart-3';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nconst props = defineProps({\r\n  transactions: Array\r\n});\r\n\r\n// Log transactions to check if data exists\r\nconsole.log(\"Props.transactions:\", props.transactions);\r\n\r\n// Ensure transactions are tracked reactively\r\nconst transactions = ref(props.transactions || []);\r\n\r\n// Watch for changes to transactions (debugging)\r\nwatch(transactions, (newVal) => {\r\n  console.log(\"Updated transactions:\", newVal);\r\n}, { deep: true });\r\n\r\n// Compute chart data reactively\r\nconst chartData = computed(() => {\r\n  const categories = {};\r\n\r\n  transactions.value.forEach(tx => {\r\n    categories[tx.category] = (categories[tx.category] || 0) + tx.amount;\r\n  });\r\n\r\n  return {\r\n    labels: Object.keys(categories),\r\n    datasets: [\r\n      {\r\n        data: Object.values(categories),\r\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\r\n      }\r\n    ]\r\n  };\r\n});\r\n\r\n// Log computed chart data\r\nwatch(chartData, (newVal) => {\r\n  console.log(\"Updated chart data:\", newVal);\r\n}, { deep: true });\r\n\r\nonMounted(() => {\r\n  console.log(\"Mounted with transactions:\", transactions.value);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <!-- Debugging: Show raw transaction data -->\r\n    <p v-if=\"!transactions.length\">No transactions available</p>\r\n    <ul v-else>\r\n      <li v-for=\"tx in transactions\" :key=\"tx.category\">\r\n        {{ tx.category }}: {{ tx.amount }}\r\n      </li>\r\n    </ul>\r\n\r\n    <!-- Render PieChart only if there’s data -->\r\n    <PieChart v-if=\"chartData.labels.length\" :data=\"chartData\" />\r\n  </div>\r\n</template>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBAoDEC,mBAAA,CAWM,cAVJC,mBAAA,0CAA6C,E,CACnCC,MAAA,CAAAC,YAAY,CAACC,MAAM,I,cAA7BJ,mBAAA,CAA4D,KAtDhEK,UAAA,EAsDmC,2BAAyB,M,cACxDL,mBAAA,CAIK,MA3DTM,UAAA,I,kBAwDMN,mBAAA,CAEKO,SAAA,QA1DXC,WAAA,CAwDuBN,MAAA,CAAAC,YAAY,EAAlBM,EAAE;yBAAbT,mBAAA,CAEK;MAF2BD,GAAG,EAAEU,EAAE,CAACC;wBACnCD,EAAE,CAACC,QAAQ,IAAG,IAAE,GAAAC,gBAAA,CAAGF,EAAE,CAACG,MAAM;qCAInCX,mBAAA,0CAA6C,EAC7BC,MAAA,CAAAW,SAAS,CAACC,MAAM,CAACV,MAAM,I,cAAvCW,YAAA,CAA6Db,MAAA;IA9DjEH,GAAA;IA8D8CiB,IAAI,EAAEd,MAAA,CAAAW;uCA9DpDZ,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}