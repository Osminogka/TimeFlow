{"ast":null,"code":"import { getToken } from '@/services/utils';\nconst BASE_URL = '/api/transactions';\nconst token = getToken();\nconst test_transactions = [{\n  amount: 120,\n  category: 'Food',\n  description: 'Lunch at a restaurant',\n  date: '2024-02-01'\n}, {\n  amount: 50,\n  category: 'Transport',\n  description: 'Bus ticket',\n  date: '2024-02-02'\n}, {\n  amount: 80,\n  category: 'Entertainment',\n  description: 'Movie night',\n  date: '2024-02-03'\n}, {\n  amount: 200,\n  category: 'Shopping',\n  description: 'New shoes',\n  date: '2024-02-04'\n}, {\n  amount: 150,\n  category: 'Bills',\n  description: 'Electricity bill',\n  date: '2024-02-05'\n}, {\n  amount: 90,\n  category: 'Food',\n  description: 'Groceries',\n  date: '2024-02-06'\n}, {\n  amount: 30,\n  category: 'Transport',\n  description: 'Taxi ride',\n  date: '2024-02-07'\n}, {\n  amount: 100,\n  category: 'Health',\n  description: 'Doctor appointment',\n  date: '2024-02-08'\n}, {\n  amount: 60,\n  category: 'Entertainment',\n  description: 'Concert ticket',\n  date: '2024-02-09'\n}, {\n  amount: 110,\n  category: 'Food',\n  description: 'Dinner with friends',\n  date: '2024-02-10'\n}, {\n  amount: 75,\n  category: 'Shopping',\n  description: 'New t-shirt',\n  date: '2024-02-11'\n}, {\n  amount: 200,\n  category: 'Bills',\n  description: 'Water bill',\n  date: '2024-02-12'\n}, {\n  amount: 40,\n  category: 'Transport',\n  description: 'Gas for car',\n  date: '2024-02-13'\n}, {\n  amount: 100,\n  category: 'Entertainment',\n  description: 'Video game purchase',\n  date: '2024-02-14'\n}, {\n  amount: 50,\n  category: 'Health',\n  description: 'Gym membership',\n  date: '2024-02-15'\n}];\nconst postRequest = async (endpoint, data) => {\n  const url = `${BASE_URL}${endpoint}`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Baerer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\nconst getRequest = async endpoint => {\n  const url = `${BASE_URL}${endpoint}`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Baerer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\nconst createTransaction = async transaction => {\n  return postRequest('/create', transaction);\n};\nconst getSelfTransaction = async (month, year) => {\n  return getRequest('/self/' + month + '/' + year);\n};\nconst getFriendTransaction = async (friendName, month, year) => {\n  return getRequest('/friend/' + friendName + '/' + month + '/' + year);\n};\nexport default {\n  createTransaction,\n  getSelfTransaction,\n  getFriendTransaction,\n  test_transactions\n};","map":{"version":3,"names":["getToken","BASE_URL","token","test_transactions","amount","category","description","date","postRequest","endpoint","data","url","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","message","getRequest","createTransaction","transaction","getSelfTransaction","month","year","getFriendTransaction","friendName"],"sources":["E:/Programming/Server/TimeFlow/Frontend/src/services/api/transaction.js"],"sourcesContent":["import { getToken } from '@/services/utils';\r\n\r\nconst BASE_URL = '/api/transactions';\r\nconst token = getToken();\r\n\r\nconst test_transactions = [\r\n    { amount: 120, category: 'Food', description: 'Lunch at a restaurant', date: '2024-02-01' },\r\n    { amount: 50, category: 'Transport', description: 'Bus ticket', date: '2024-02-02' },\r\n    { amount: 80, category: 'Entertainment', description: 'Movie night', date: '2024-02-03' },\r\n    { amount: 200, category: 'Shopping', description: 'New shoes', date: '2024-02-04' },\r\n    { amount: 150, category: 'Bills', description: 'Electricity bill', date: '2024-02-05' },\r\n    { amount: 90, category: 'Food', description: 'Groceries', date: '2024-02-06' },\r\n    { amount: 30, category: 'Transport', description: 'Taxi ride', date: '2024-02-07' },\r\n    { amount: 100, category: 'Health', description: 'Doctor appointment', date: '2024-02-08' },\r\n    { amount: 60, category: 'Entertainment', description: 'Concert ticket', date: '2024-02-09' },\r\n    { amount: 110, category: 'Food', description: 'Dinner with friends', date: '2024-02-10' },\r\n    { amount: 75, category: 'Shopping', description: 'New t-shirt', date: '2024-02-11' },\r\n    { amount: 200, category: 'Bills', description: 'Water bill', date: '2024-02-12' },\r\n    { amount: 40, category: 'Transport', description: 'Gas for car', date: '2024-02-13' },\r\n    { amount: 100, category: 'Entertainment', description: 'Video game purchase', date: '2024-02-14' },\r\n    { amount: 50, category: 'Health', description: 'Gym membership', date: '2024-02-15' },\r\n  ];\r\n  \r\n\r\nconst postRequest = async (endpoint, data) => {\r\n    const url = `${BASE_URL}${endpoint}`;\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Baerer ${token}`\r\n        },\r\n        body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'API request failed');\r\n    }\r\n\r\n    return response.json();\r\n};\r\n\r\nconst getRequest = async (endpoint) => {\r\n    const url = `${BASE_URL}${endpoint}`;\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Baerer ${token}`\r\n        },\r\n    });\r\n\r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'API request failed');\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\nconst createTransaction = async (transaction) => {\r\n    return postRequest('/create', transaction);\r\n};\r\n\r\nconst getSelfTransaction = async (month, year,) => {\r\n    return getRequest('/self/' + month + '/' + year);\r\n}\r\n\r\nconst getFriendTransaction = async (friendName, month, year) => {\r\n    return getRequest('/friend/' + friendName + '/' + month + '/' + year);\r\n}\r\n  \r\nexport default {\r\n    createTransaction,\r\n    getSelfTransaction,\r\n    getFriendTransaction,\r\n    test_transactions\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}